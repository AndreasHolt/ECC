Index: script.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var myGraph = new Graph({\n\tcanvasId: 'myCanvas',\n\tminX: -50,\n\tminY: -50,\n\tmaxX: 50,\n\tmaxY: 50,\n\tunitsPerTick: 5\n});\n\nfunction equationP(x) {\n\tlet a = -4, b = 15;\n\treturn Math.sqrt((x * x * x) + a * x + b);\n}\n\nmyGraph.drawEquation(function (x) {\n\treturn equationP(x);\n}, 'green', 3);\n\nmyGraph.drawEquation(function (x) {\n\treturn -equationP(x);\n}, 'green', 3);\n\n/// ----------------------------------------------------------------------\n/// Draw points on graph\n/// ----------------------------------------------------------------------\n\n\ndocument.getElementById('pointSVG').addEventListener('mousemove', e => {\n\tmyGraph.movePoint(e);\n});\n\nlet operations = document.getElementsByClassName('operation');\n\nfunction init() {\n\tfor (const input of operations) {\n\t\tinput.addEventListener('click',  e => {\n\t\t\tlet pointsOnGraph = document.getElementsByClassName('workingPoints');\n\t\t\tlet calculatedPoints = document.getElementsByClassName('calculatedPoints');\n\n\t\t\tfor (const buttons of operations) {\n\t\t\t\tif(buttons.disabled == true) {\n\t\t\t\t\tbuttons.disabled = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(pointsOnGraph.length == 2) {\n\t\t\t\tpointsOnGraph[1].remove()\n\t\t\t\tpointsOnGraph[0].remove()\n\t\t\t} else if(pointsOnGraph.length == 1) {\n\t\t\t\tpointsOnGraph[0].remove()\n\t\t\t} \n\n\t\t\tif(calculatedPoints.length == 2) {\n\t\t\t\tcalculatedPoints[1].remove();\n\t\t\t\tcalculatedPoints[0].remove();\n\t\t\t} else if(calculatedPoints.length == 1) {\n\t\t\t\tcalculatedPoints[0].remove();\n\t\t\t}\n\t\t\t\n\t\t\tinput.disabled = true;\n\t\t});\n\t}\n}\n\ninit()\n\ndocument.getElementById('layer2').addEventListener('click', e => {\n    let pointsOnGraph = document.getElementsByClassName('workingPoints')\n\n    // Delete the point on the graph that was placed first\n\tif(operations[0].disabled){\n\t\tif(pointsOnGraph.length === 1){\n\t\t\tmyGraph.addPointOnClick();\n\t\t\trunOperation(1);   \n\t\n\t\t} else if(pointsOnGraph.length === 0){\n\t\t\tmyGraph.addPointOnClick();\n\t\n\t\t} else {\n\t\t\tpointsOnGraph[0].remove();\n\t\t\tmyGraph.addPointOnClick();\n\t\t\trunOperation(1);\n\t\t}\n\t} else if (operations[1].disabled) {\n\t\tif(pointsOnGraph.length === 0){\n\t\t\tmyGraph.addPointOnClick();\n\t\t\trunOperation(2);   \n\n\t\t} else if(pointsOnGraph.length === 1){\n\t\t\tpointsOnGraph[0].remove();\n\t\t\tmyGraph.addPointOnClick();\n\t\t\trunOperation(2);\n\t\t}\n\t}\n});\n\nfunction runOperation(operations) {\n\tswitch (operations) {\n\t\tcase 1:\n\t\t\tpointAddition();\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmyGraph.pointDouble();\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Hey Chat!');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Please no');\n\t\t\tbreak;\n\t}\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/script.js b/script.js
--- a/script.js	(revision 089a7857900804832a1e6222c4021cbfd4c1cca1)
+++ b/script.js	(date 1647631818096)
@@ -42,10 +42,12 @@
 					buttons.disabled = false;
 				}
 			}
-
 			if(pointsOnGraph.length == 2) {
 				pointsOnGraph[1].remove()
 				pointsOnGraph[0].remove()
+				document.getElementById('testing')
+
+
 			} else if(pointsOnGraph.length == 1) {
 				pointsOnGraph[0].remove()
 			} 
@@ -71,7 +73,7 @@
 	if(operations[0].disabled){
 		if(pointsOnGraph.length === 1){
 			myGraph.addPointOnClick();
-			runOperation(1);   
+			runOperation(1);
 	
 		} else if(pointsOnGraph.length === 0){
 			myGraph.addPointOnClick();
Index: realsDoubling.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Graph.prototype.pointDouble = function (){\n\tlet points = document.getElementsByClassName('workingPoints');\n\tstorePoints = {\n\t\tpoint1: [points[0].getAttribute('cx'), points[0].getAttribute('cy')]\n\t}\n\n\tlet x = (storePoints.point1[0]-this.centerX)/this.scaleX;\n\tlet y = -(storePoints.point1[1]-this.centerY)/this.scaleY;\n\n\tlet lambda = (3*x*x-4)/(2*y); // 10 = elliptic curve parameter a. \n\tlet newX = lambda * lambda - 2*x;\n\tlet newY = -y + lambda*(x-newX);\n\n\tmyGraph.addCalculatedPoint(newX, newY);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/realsDoubling.js b/realsDoubling.js
--- a/realsDoubling.js	(revision 089a7857900804832a1e6222c4021cbfd4c1cca1)
+++ b/realsDoubling.js	(date 1647631773018)
@@ -1,13 +1,13 @@
 Graph.prototype.pointDouble = function (){
 	let points = document.getElementsByClassName('workingPoints');
-	storePoints = {
+	let storePoints = {
 		point1: [points[0].getAttribute('cx'), points[0].getAttribute('cy')]
 	}
 
 	let x = (storePoints.point1[0]-this.centerX)/this.scaleX;
 	let y = -(storePoints.point1[1]-this.centerY)/this.scaleY;
 
-	let lambda = (3*x*x-4)/(2*y); // 10 = elliptic curve parameter a. 
+	let lambda = (3*x*x-4)/(2*y); // 10 = elliptic curve parameter a.
 	let newX = lambda * lambda - 2*x;
 	let newY = -y + lambda*(x-newX);
 
Index: graphHelpers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Graph.prototype.movePoint = function (event) {\n\tlet mousePos = this.mouseToGraph(event.clientX, event.clientY)\n\tlet coords = this.graphToCoords(mousePos.x, mousePos.y)\n\n\tif (mousePos.y > this.centerY) {\n\t\tthis.moveSection(\"point\", mousePos.x, this.centerY - (-equationP(coords.x) * this.scaleY));\n\t} else {\n\t\tthis.moveSection(\"point\", mousePos.x, this.centerY - (equationP(coords.x) * this.scaleY));\n\t}\n};\n\nGraph.prototype.moveSection = function (id, x, y) {\n    var el = document.getElementById(id);\n\n    if (!y)\n        return\n\n    if (el) {\n        el.setAttribute('cx', x);\n        el.setAttribute('cy', y);\n    }\n}\n\nGraph.prototype.mouseToGraph = function(mouseX, mouseY) {\n\tx = (this.centerX - this.offsetLeft) + mouseX - 50 * this.scaleX;\n\ty = (this.centerY - this.offsetTop) + mouseY - 50 * this.scaleY;\n\treturn {x, y}\n}\n\nGraph.prototype.graphToCoords = function(graphX, graphY) {\n\tx = (graphX/this.scaleX) - this.rangeX/2\n\ty = -((graphY/this.scaleY) - this.rangeY/2)\n\n\treturn {x, y}\n}\n\nGraph.prototype.coordsToGraph = function(coordsX, coordsY) {\n\tx = this.centerX - coordsX\n\ty = this.centerY - coordsY\n\treturn {x, y}\n}\n\nGraph.prototype.addCalculatedPoint = function(x, y) {\n\tif(document.getElementsByClassName('calculatedPoints').length == 2){\n\t\tdocument.getElementsByClassName('calculatedPoints')[1].remove();\n\t\tdocument.getElementsByClassName('calculatedPoints')[0].remove();\n        \n\t\tdocument.getElementsByClassName('linesConnecting')[1].remove();\n\t\tdocument.getElementsByClassName('linesConnecting')[0].remove();\n\t}\n    var svgNS = \"http://www.w3.org/2000/svg\";\n\n    let arrayIntersectInverted = [y, -y]\n\n    for(i = 0; i < arrayIntersectInverted.length; i++){\n         var circle = document.createElementNS(svgNS,'circle');\n         (i == 0)?(circle.setAttribute('fill','dodgerblue')):(circle.setAttribute('fill','fuchsia'));\n\n         circle.setAttribute('cx', (x * this.scaleX) + this.centerX);\n         circle.setAttribute('cy', (-arrayIntersectInverted[i] * this.scaleY) + this.centerY);\n         circle.classList.add('calculatedPoints')\n         circle.setAttribute('r', 5);\n\n         var svg = document.querySelector('svg');\n         svg.appendChild(circle);\n\n        let fromPoint = document.getElementsByClassName('workingPoints')[0]\n\n        var newLine = document.createElementNS('http://www.w3.org/2000/svg','line');\n        if(i == 0){\n            newLine.setAttribute('x1',fromPoint.getAttribute('cx'));\n            newLine.setAttribute('y1',fromPoint.getAttribute('cy'));\n\n            newLine.classList.add('linesConnecting')\n            newLine.setAttribute('x2', (x * this.scaleX) + this.centerX);\n            newLine.setAttribute('y2', (arrayIntersectInverted[i+1] * this.scaleY) + this.centerY);\n            newLine.setAttribute(\"stroke\", \"dodgerblue\")\n            newLine.setAttribute(\"stroke-width\", \"2\")\n            svg.appendChild(newLine);\n        } else {\n            newLine.setAttribute('x1', (x * this.scaleX) + this.centerX);\n            newLine.setAttribute('y1', (arrayIntersectInverted[i] * this.scaleY) + this.centerY);\n \n            newLine.classList.add('linesConnecting')\n            newLine.setAttribute('x2', (x * this.scaleX) + this.centerX);\n            newLine.setAttribute('y2', (arrayIntersectInverted[i-1] * this.scaleY) + this.centerY);\n            newLine.setAttribute(\"stroke\", \"fuchsia\")\n            newLine.setAttribute(\"stroke-width\", \"2\")\n            svg.appendChild(newLine);\n        }\n\n        \n\n\n\n\n\n\n\n\n    }\n}\n\nGraph.prototype.addPointOnClick = function() {\n    let point = document.getElementById('point')\n    var svgNS = \"http://www.w3.org/2000/svg\";\n\n     var circle = document.createElementNS(svgNS,'circle');\n     circle.setAttribute('fill','red');\n     circle.setAttribute('cx', point.getAttribute('cx'));\n     circle.setAttribute('cy', point.getAttribute('cy'));\n     circle.classList.add('workingPoints')\n     circle.setAttribute('r',5);\n\n     var svg = document.querySelector('svg');\n     svg.appendChild(circle);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graphHelpers.js b/graphHelpers.js
--- a/graphHelpers.js	(revision 089a7857900804832a1e6222c4021cbfd4c1cca1)
+++ b/graphHelpers.js	(date 1647629043904)
@@ -1,4 +1,5 @@
 Graph.prototype.movePoint = function (event) {
+    	dfsfndsjfn
 	let mousePos = this.mouseToGraph(event.clientX, event.clientY)
 	let coords = this.graphToCoords(mousePos.x, mousePos.y)
 
Index: realsAddition.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function pointAddition() {\n    let points = document.getElementsByClassName('workingPoints')\n    \n\tstorePoints = {\n        point1: [points[0].getAttribute('cx'), points[0].getAttribute('cy')],\n        point2: [points[1].getAttribute('cx'), points[1].getAttribute('cy')]\n    }\n\n    let lambda = ((storePoints.point2[1] - storePoints.point1[1]) / (storePoints.point2[0] - storePoints.point1[0]))\n    let thirdX = lambda * lambda  + lambda // *\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/realsAddition.js b/realsAddition.js
--- a/realsAddition.js	(revision 089a7857900804832a1e6222c4021cbfd4c1cca1)
+++ b/realsAddition.js	(date 1647698642420)
@@ -1,7 +1,7 @@
 function pointAddition() {
     let points = document.getElementsByClassName('workingPoints')
-    
-	storePoints = {
+
+    let storePoints = {
         point1: [points[0].getAttribute('cx'), points[0].getAttribute('cy')],
         point2: [points[1].getAttribute('cx'), points[1].getAttribute('cy')]
     }
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1647627436393)
+++ b/.idea/modules.xml	(date 1647627436393)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/ECC.iml" filepath="$PROJECT_DIR$/.idea/ECC.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1647627436396)
+++ b/.idea/vcs.xml	(date 1647627436396)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1647627436480)
+++ b/.idea/.gitignore	(date 1647627436480)
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: graph.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function Graph(config) {\n\t// user defined properties\n\tthis.canvas = document.getElementById(config.canvasId);\n\tthis.minX = config.minX;\n\tthis.minY = config.minY;\n\tthis.maxX = config.maxX;\n\tthis.maxY = config.maxY;\n\tthis.unitsPerTick = config.unitsPerTick;\n\tthis.domRect = this.canvas.getBoundingClientRect();\n\n\t// constants\n\tthis.axisColor = '#aaa';\n\tthis.font = '8pt Calibri';\n\tthis.tickSize = 20;\n\n\t// relationships\n\tthis.context = this.canvas.getContext('2d');\n\tthis.rangeX = this.maxX - this.minX;\n\tthis.rangeY = this.maxY - this.minY;\n\tthis.unitX = this.canvas.width / this.rangeX;\n\tthis.unitY = this.canvas.height / this.rangeY;\n\t// this.centerY = Math.round(Math.abs(this.minY / this.rangeY) * this.canvas.height);\n\t// this.centerX = Math.round(Math.abs(this.minX / this.rangeX) * this.canvas.width);\n\tthis.iteration = (this.maxX - this.minX) / 1000;\n\tthis.scaleX = this.canvas.width / this.rangeX;\n\tthis.scaleY = this.canvas.height / this.rangeY;\n\n\t// our settings\n\tthis.pointSize = 4\n\tthis.svgID = \"pointSVG\"\n\tthis.offsetTop = this.canvas.offsetTop\n\tthis.offsetLeft = this.canvas.offsetLeft\n\tthis.centerY = (Math.abs(this.minY / this.rangeY) * this.canvas.height);\n\tthis.centerX = (Math.abs(this.minX / this.rangeX) * this.canvas.width);\n\n\n\t// draw x and y axis\n\tthis.drawXAxis();\n\tthis.drawYAxis();\n}\n\nGraph.prototype.drawXAxis = function () {\n\tvar context = this.context;\n\tcontext.save();\n\tcontext.beginPath();\n\tcontext.moveTo(0, this.centerY);\n\tcontext.lineTo(this.canvas.width, this.centerY);\n\tcontext.strokeStyle = this.axisColor;\n\tcontext.lineWidth = 2;\n\tcontext.stroke();\n\n\t// draw tick marks\n\tvar xPosIncrement = this.unitsPerTick * this.unitX;\n\tvar xPos, unit;\n\tcontext.font = this.font;\n\tcontext.textAlign = 'center';\n\tcontext.textBaseline = 'top';\n\n\t// draw left tick marks\n\txPos = this.centerX - xPosIncrement;\n\tunit = -1 * this.unitsPerTick;\n\twhile (xPos > 0) {\n\t\tcontext.moveTo(xPos, this.centerY - this.tickSize / 2);\n\t\tcontext.lineTo(xPos, this.centerY + this.tickSize / 2);\n\t\tcontext.stroke();\n\t\tcontext.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);\n\t\tunit -= this.unitsPerTick;\n\t\txPos = Math.round(xPos - xPosIncrement);\n\t}\n\n\t// draw right tick marks\n\txPos = this.centerX + xPosIncrement;\n\tunit = this.unitsPerTick;\n\twhile (xPos < this.canvas.width) {\n\t\tcontext.moveTo(xPos, this.centerY - this.tickSize / 2);\n\t\tcontext.lineTo(xPos, this.centerY + this.tickSize / 2);\n\t\tcontext.stroke();\n\t\tcontext.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);\n\t\tunit += this.unitsPerTick;\n\t\txPos = Math.round(xPos + xPosIncrement);\n\t}\n\tcontext.restore();\n};\n\nGraph.prototype.drawYAxis = function () {\n\tvar context = this.context;\n\tcontext.save();\n\tcontext.beginPath();\n\tcontext.moveTo(this.centerX, 0);\n\tcontext.lineTo(this.centerX, this.canvas.height);\n\tcontext.strokeStyle = this.axisColor;\n\tcontext.lineWidth = 2;\n\tcontext.stroke();\n\n\t// draw tick marks\n\tvar yPosIncrement = this.unitsPerTick * this.unitY;\n\tvar yPos, unit;\n\tcontext.font = this.font;\n\tcontext.textAlign = 'right';\n\tcontext.textBaseline = 'middle';\n\n\t// draw top tick marks\n\tyPos = this.centerY - yPosIncrement;\n\tunit = this.unitsPerTick;\n\twhile (yPos > 0) {\n\t\tcontext.moveTo(this.centerX - this.tickSize / 2, yPos);\n\t\tcontext.lineTo(this.centerX + this.tickSize / 2, yPos);\n\t\tcontext.stroke();\n\t\tcontext.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);\n\t\tunit += this.unitsPerTick;\n\t\tyPos = Math.round(yPos - yPosIncrement);\n\t}\n\n\t// draw bottom tick marks\n\tyPos = this.centerY + yPosIncrement;\n\tunit = -1 * this.unitsPerTick;\n\twhile (yPos < this.canvas.height) {\n\t\tcontext.moveTo(this.centerX - this.tickSize / 2, yPos);\n\t\tcontext.lineTo(this.centerX + this.tickSize / 2, yPos);\n\t\tcontext.stroke();\n\t\tcontext.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);\n\t\tunit -= this.unitsPerTick;\n\t\tyPos = Math.round(yPos + yPosIncrement);\n\t}\n\tcontext.restore();\n};\n\nGraph.prototype.drawEquation = function (equation, color, thickness) {\n\tvar context = this.context;\n\tcontext.save();\n\tcontext.save();\n\tthis.transformContext();\n\n\tcontext.beginPath();\n\tcontext.moveTo(this.minX, equation(this.minX));\n\n\tlet lastX = 0;\n\t\n\tfor (var x = this.minX + this.iteration; x <= this.maxX; x += this.iteration) {\n\t\tif (isNaN(equation(x))) {\n\t\t\tlastX = x\n\t\t}\n\t}\n\t\n\tlet realRootMultiplier = 1.01;\n\tlet realRoot = lastX * realRootMultiplier;\n\n\tfor (var x = this.minX + this.iteration; x <= this.maxX; x += this.iteration) {\n\t\tif (isNaN(equation(x)) && x > realRoot) {\n\t\t\tcontext.lineTo(x, 0);\n\t\t} else {\n\t\t\tcontext.lineTo(x, equation(x));\n\t\t}\n\t}\n\n\tcontext.restore();\n\tcontext.lineJoin = 'round';\n\tcontext.lineWidth = thickness;\n\tcontext.strokeStyle = color;\n\tcontext.stroke();\n\tcontext.restore();\n};\n\nGraph.prototype.transformContext = function () {\n\tvar context = this.context;\n\n\t// move context to center of canvas\n\tthis.context.translate(this.centerX, this.centerY);\n\n\t/*\n\t * stretch grid to fit the canvas window, and\n\t * invert the y scale so that that increments\n\t * as you move upwards\n\t */\n\tcontext.scale(this.scaleX, -this.scaleY);\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph.js b/graph.js
--- a/graph.js	(revision 089a7857900804832a1e6222c4021cbfd4c1cca1)
+++ b/graph.js	(date 1647629043911)
@@ -12,7 +12,10 @@
 	this.axisColor = '#aaa';
 	this.font = '8pt Calibri';
 	this.tickSize = 20;
-
+	this just works so well
+	document.getElementById('testing')
+fsdfdsjfs
+	dfsfndsjfn
 	// relationships
 	this.context = this.canvas.getContext('2d');
 	this.rangeX = this.maxX - this.minX;
Index: .idea/ECC.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/ECC.iml b/.idea/ECC.iml
new file mode 100644
--- /dev/null	(date 1647627436388)
+++ b/.idea/ECC.iml	(date 1647627436388)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/temp" />
+      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/tmp" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
